}
colnames(data) <- c("Stocks", "Bonds")
datanone = NULL
for (Ticker in tickers_index){
dataall <- cbind(datanone,
getSymbols.yahoo(Ticker, from="2010-01-01", periodicity = "weekly", auto.assign=FALSE)[,6])
}
colnames(data) <- c("Stocks", "Bonds")
head(dataall)
data <- getSymbols('AGG', src='yahoo', auto.assign = FALSE)
head(data)
tail(data)
datanone = NULL
for (Ticker in tickers_index){
data <- cbind(datanone,
getSymbols.yahoo(Ticker, from="2010-01-01", periodicity = "weekly", auto.assign=FALSE)[,6])
}
colnames(data) <- c("Stocks", "Bonds")
head(data)
length(data)
log_Returns<-diff(log(data))[-1,]
tail(log_Returns)
risk_free_rate <- 0
colnames(data) <- c("Stocks", "Bonds")
data = NULL
for (Ticker in tickers_index){
data <- cbind(data,
getSymbols.yahoo(Ticker, from="2010-01-01", periodicity = "weekly", auto.assign=FALSE)[,6])
}
colnames(data) <- c("Stocks", "Bonds")
head(data)
log_Returns<-diff(log(data))[-1,]
tail(log_Returns)
risk_free_rate <- 0
data[,2]
sum(data[,2])
mean(data[,2])
er_stocks <- mean(data[,1])
er_stocks
er_bonds <- mean(log_Returns[,2])
er_bonds
er_stocks <- mean(log_Returns[,1])
er_stocks
sd_bonds <- sd(er_bonds)
sd_bonds
er_bonds <- mean(log_Returns[,2])
sd_bonds <- sd(er_bonds)
sd_bonds
er_bonds <- mean(log_Returns[,2])
er_bonds
sd_bonds <- sd(log_Returns[,2])
sd_bonds
sd2_bonds <- sqrt(mean((log_Returns[,2] - mean(log_Returns[,2]))^2))
sd2_bonds
sd_stocks <- sd(log_Returns[,1])
sd_stocks
sr_bonds <- (er_bonds - risk_free_rate)/sd_bonds
sr_bonds
sr_stocks <- (er_stocks - risk_free_rate) / sd_stocks
sr_stocks
x_weights <- seq(from = 0, to = 1, length.out = 1000)
x_weights
?cor()
cor_bs <- cor(er_bonds, er_stocks)
cor_bs
cor_bs <- cor(er_bonds, er_stocks, x_weights)
cor_bs <- cor(er_bonds, er_stocks)
cor_bs
cor_bs <- cor(log_Returns[,2], log_Returns[,1])
cor_bs
cor_bs <- cor(log_Returns[,2]*x_weights, log_Returns[,1])
cor_bs <- cor(log_Returns[,2], log_Returns[,1])
er_bonds
sd_bonds <- sd(log_Returns[,2])
sd2_bonds <- sqrt(mean((log_Returns[,2] - mean(log_Returns[,2]))^2))
sd_bonds
sd2_bonds
cor_bs <- cor(log_Returns[,2], log_Returns[,1])
cor_bs
pf <- data.frame(w_bonds = x_weights, w_stocks = 1 - x_weights, er_p=NA, sd_p=NA, sr_p=NA)
pf
length(pf)
nrow(pf)
head(pf)
cor_bs
pf <- data.frame(w_bonds = x_weights, w_stocks = 1 - x_weights, er_p=NA, sd_p=NA, sr_p=NA)
head(pf)
# Calculating the expected returns and standard deviations for the 1000 portfolios
for(i in 1:nrow(pf)){
pf$er_p[i] <- pf$w_bonds[i] * er_bonds + pf$w_stocks[i] * er_stocks #Formula for calculating portfolio returns (see slide 55)
pf$sd_p[i] <- sqrt(pf$w_bonds[i]^2 * sd_bonds^2 +
pf$w_stocks[i]^2 * sd_stocks^2 +
2 * pf$w_bonds[i] * pf$w_stocks[i] * sd_bonds * sd_stocks* cor_bs) # Formula for calculating portfolio standard deviation (see slide 56 or 59)
}
pf
plot(x=pf$sd_p, y=pf$er_p, xlab="SD Portfolio", ylab="Expected Return Portfolio") +
grid()
pf$sr_p <- (pf$er_p - risk_free_rate)/pf$sd_p
indx_mp <- which.max(pf$sr_p)
indx_mp
?cbind()
weightings <- cbind(pf$w_bonds[indx_mp], pf$w_stocks[indx_mp])
colnames(weightings) <- c("Stocks", "Bonds")
pie(weightings, labels = paste(round(weightings*100), "% ", colnames(weightings),sep = ""), main = "Asset allocation of market portfolio")
sr_mp <- pf$sr_p[indx_mp]
cbind(sr_stocks, sr_bonds, sr_mp)
cbind(sr_stocks, sr_bonds, sr_mp)
plot(x=pf$sd_p, y=pf$er_p, xlab="SD Portfolio", ylab="Expected Return Portfolio") +
grid()
abline(a=risk_free_rate, b=sr_mp, lty=2, col="red")
plot(x=pf$sd_p, y=pf$er_p, xlab="SD Portfolio", ylab="Expected Return Portfolio", lty=1, col="green") +
grid()
abline(a=risk_free_rate, b=sr_mp, lty=2, col="red")
plot(x=pf$sd_p, y=pf$er_p, xlab="SD Portfolio", ylab="Expected Return Portfolio", lty=1, lwd=0.65) +
grid()
abline(a=risk_free_rate, b=sr_mp, lty=2, col="red")
plot(x=pf$sd_p, y=pf$er_p, xlab="SD Portfolio", ylab="Expected Return Portfolio", lty=1, lwd=1) +
grid()
abline(a=risk_free_rate, b=sr_mp, lty=2, col="red")
plot(x=pf$sd_p, y=pf$er_p, xlab="SD Portfolio", ylab="Expected Return Portfolio", lty=1, lwd=2) +
grid()
abline(a=risk_free_rate, b=sr_mp, lty=2, col="red")
plot(x=pf$sd_p, y=pf$er_p, xlab="SD Portfolio", ylab="Expected Return Portfolio", lty=1, lwd=0.5) +
grid()
abline(a=risk_free_rate, b=sr_mp, lty=2, col="red")
plot(x=pf$sd_p, y=pf$er_p, xlab="SD Portfolio", ylab="Expected Return Portfolio", lty=1, lwd=0.1) +
grid()
abline(a=risk_free_rate, b=sr_mp, lty=2, col="red")
plot(x=pf$sd_p, y=pf$er_p, xlab="SD Portfolio", ylab="Expected Return Portfolio", lty=1) +
grid()
abline(a=risk_free_rate, b=sr_mp, lty=2, col="red")
plot(x=pf$sd_p, y=pf$er_p, xlab="SD Portfolio", ylab="Expected Return Portfolio", lwd=1) +
grid()
plot(x=pf$sd_p, y=pf$er_p, xlab="SD Portfolio", ylab="Expected Return Portfolio", lty=1) +
grid()
abline(a=risk_free_rate, b=sr_mp, lty=2, col="red")
pie(weightings, labels = paste(round(weightings*100), "% ", colnames(weightings),sep = ""), main = "Asset allocation of market portfolio")
indx_mp
weightings <- cbind(pf$w_stocks[indx_mp], pf$w_bonds[indx_mp])
colnames(weightings) <- c("Stocks", "Bonds")
pie(weightings, labels = paste(round(weightings*100), "% ", colnames(weightings),sep = ""), main = "Asset allocation of market portfolio")
View(pf)
View(pf)
View(pf)
View(pf)
library(lmtest)
library(tseries)
library(quantmod)
library(lmtest)
library(tseries)
install.packages("quantmod")
install.packages("quantmod")
library(quantmod)
library(lmtest)
library(tseries)
library(lmtest)
library(tseries)
data <- NULL
tickers_index <- c("^GSPC", "^TNX")
for (Ticker in tickers_index){
data <- cbind(data,
getSymbols.yahoo(Ticker, from="2000-01-01", to="2021-12-01", periodicity = "monthly",
auto.assign=FALSE)[,6])
}
head(data)
colnames(data)<-c("S&P 500", "Treasury Yield 10 Years")
head(data)
adf.test(data$`S&P 500`)
adf.test(data$`S&P 500`)
adf.test(data$`Treasury Yield 10 Years`)
data
returns_sp <- na.omit(diff(log(data$`S&P 500`))) # Apply logarithm and take first differences of the original series
returns_sp
returns_t <- na.omit(diff(log(data$`Treasury Yield 10 Years`)))
returns_t
adf.test(returns_sp)
adf.test(returns_t)
lin_reg <- lm(data$`S&P 500` ~ data$`Treasury Yield 10 Years`, data = data)
lin_reg
objects(lin_reg)
coefficients <- lin_reg$coefficients
coefficients
coeftest(coefficients)
coeftest(coefficients)
lin_reg <- lm(data$`returns_sp` ~ data$`returns_t`, data = data)
lin_reg <- lm(data$`S&P 500` ~ data$`Treasury Yield 10 Years`, data = data)
lin_reg
coefficients
coefficients
coefficients
coeftest(coefficients)
coeftest(lm(data$`S&P 500` ~ data$`Treasury Yield 10 Years`))
summary(lin_reg)
summary(lin_reg)$R
summary(lin_reg)
?summary()
?summar
help("summary")
summary(lin_reg)
summary(lin_reg)$Multiple R-squared
summary(lin_reg)$`Multiple R-squared`
summary(lin_reg)$`R-squared`
summary(lin_reg)
summary(lin_reg)$r.squared
coefficients[0]
coefficients['Intercept']
coefficients[1]
resid <- returns$_sp - coefficients[1] - coefficients[2]*returns_sp$`S&P 500`
resid <- returns_sp$`S&P 500` - coefficients[1] - coefficients[2]*returns_sp$`S&P 500`
plot(resid)
returns <- na.omit(diff(log(data)))
returns
adf.test(returns$`S&P 500`)
adf.test(returns$`Treasury Yield 10 Years`)
lin_reg <- lm(data$`S&P 500` ~ data$`Treasury Yield 10 Years`, data = data)
lin_reg
coefficients <- lin_reg$coefficients # Tip: Run objects(lin_reg) to find extractable variables from the lin_reg object
coefficients
coeftest(lm(data$`S&P 500` ~ data$`Treasury Yield 10 Years`))
summary(lin_reg)$r.squared
resid <- returns$`S&P 500` - coefficients[1] - coefficients[2]*returns$`S&P 500`
resid
plot(resid) +
grid()
resid <- lin_reg$residuals
resid
source("~/Library/Mobile Documents/com~apple~CloudDocs/HSLU/Master/2. Semester/TSA_TimeSeriesAnalysisFinance/RStudio/Exercises/4. Linear regression exercises.R", echo=TRUE)
resid <- lin_reg$resid
resid
plot(resid)
resid <- returns$`S&P 500` - coefficients[1] - coefficients[2]*returns$`S&P 500`
resid
plot(resid)
plot(data$`Treasury Yield 10 Years`, main='Treasury')
plot(data$`S&P 500`, main='S&P500')
par(mfrow(2,1))
plot(data$`S&P 500`, main='S&P500')
par(mfrow=c(2,1))
par(mfrow=c(2,1))
plot(data$`S&P 500`, main='S&P500')
plot(data$`Treasury Yield 10 Years`, main='Treasury')
plot(returns)
par(mfrow=c(1,1))
plot(returns)
coeftest(lm(data$`S&P 500` ~ data$`Treasury Yield 10 Years`))
lin_reg <- lm(data$`S&P 500` ~ data$`Treasury Yield 10 Years`, data = returns)
coefficients <- lin_reg$coefficients # Tip: Run objects(lin_reg) to find extractable variables from the lin_reg object
coeftest(lm(data$`S&P 500` ~ data$`Treasury Yield 10 Years`))
lin_reg <- lm(returns$`S&P 500` ~ returns$`Treasury Yield 10 Years`, data = returns)
coefficients <- lin_reg$coefficients # Tip: Run objects(lin_reg) to find extractable variables from the lin_reg object
coeftest(lm(returns$`S&P 500` ~ returns$`Treasury Yield 10 Years`))
summary(lin_reg)$r.squared
resid <- returns$`S&P 500` - coefficients[1] - coefficients[2]*returns$`Treasury Yield 10 Years`
plot(resid)
plot(resid) +
grid()
plot(resid)
returns
plot(returns)
resid <- lin_reg$residuals
plot(resid)
resid <- returns$`S&P 500` - coefficients[1] - coefficients[2]*returns$`Treasury Yield 10 Years`
plot(resid)
library(tseries)
library(forecast)
library(lmtest)
library(quantmod)
data <- NULL
tickers_index <- c("^SSMI") # Ticker from Yahoo Finance for the SMI
for (Ticker in tickers_index){
data <- cbind(data,
getSymbols.yahoo(Ticker, from="1990-01-01", periodicity = "weekly", auto.assign=FALSE)[,6])
}
SMI <- data
colnames(SMI) <- c("SMI")
plot(SMI, main="SMI")
adf.test(data$SSMI.Adjusted)
SMI_returns <- na.omit(diff(log(SMI)))
plot(SMI_returns, main="SMI Returns", ylab=NULL)
adf.test(SMI_returns) # SMI returns are stationary
max.order <- 2
d <- 1
arima_aic <- matrix(NA, ncol=max.order+1, nrow=max.order+1)
row.names(arima_aic) <- c(0:max.order) # Order of AR(p) in rows
colnames(arima_aic) <- c(0:max.order) # Order of MA(q) in columns
arima_aic[i+1,j+1] <- Arima(y=data$SSMI.Adjusted , order=c(1,1,1), include.constant = TRUE)$aic
for(i in 0:max.order){
for(j in 0:max.order){
arima_aic[i+1,j+1] <- Arima(y=data$SSMI.Adjusted , order=c(1,1,1), include.constant = TRUE)$aic
}
}
arima_aic
s
for(i in 0:max.order){
for(j in 0:max.order){
arima_aic[i+1,j+1] <- Arima(y=data$SSMI.Adjusted , order=c(i,1,j), include.constant = TRUE)$aic
}
}
arima_aic
index <- which(arima_aic == min(arima_aic), arr.ind = TRUE)
ar <- as.numeric(rownames(arima_aic)[index[1]])
ma <- as.numeric(colnames(arima_aic)[index[2]])
index
ar
ma
arima <- Arima(y=log(SMI), order=c(ar,1,ma), include.constant = TRUE)
arima
coeftest(arima)
help("forecast")
pred <- forecast(arima ,level=c(80, 95),h=frequeny(12))
pred <- forecast(arima ,level=c(80, 95),h=frequency(12))
plot(üred, ylab="SMI")
plot(pred, ylab="SMI")
pred <- forecast(arima ,h=frequency(12))
plot(pred, ylab="SMI")
help("forecast")
pred <- forecast(arima ,level=c(80, 100),h=frequency(12))
plot(pred, ylab="SMI")
pred <- forecast(arima, level=c(80, 100))
plot(pred, ylab="SMI")
pred <- forecast(arima, level=0.95, h=20)
plot(pred, ylab="SMI")
help("forecast")
pred <- forecast(arima, level=0.95, h=50)
plot(pred, ylab="SMI")
pred <- forecast(arima, level=0.95, h=1)
plot(pred, ylab="SMI")
plot(forecast(arima, level=0.95, h=10), main='Forecasting with ARIMA(1,1,1) SMI')
plot(forecast(arima, level=0.95, h=50), main='Forecasting with ARIMA(1,1,1) SMI')
plot(forecast(arima, level=0.95, h=5), main='Forecasting with ARIMA(1,1,1) SMI')
plot(forecast(arima, level=0.80, h=5), main='Forecasting with ARIMA(1,1,1) SMI')
plot(forecast(arima, level=0.80, h=15), main='Forecasting with ARIMA(1,1,1) SMI')
plot(forecast(arima, level=0.50, h=15), main='Forecasting with ARIMA(1,1,1) SMI')
plot(forecast(arima, level=0.20, h=15), main='Forecasting with ARIMA(1,1,1) SMI')
plot(forecast(arima, level=0.80, h=15), main='Forecasting with ARIMA(1,1,1) SMI')
plot(forecast(arima, level=0.60, h=15), main='Forecasting with ARIMA(1,1,1) SMI')
plot(forecast(arima, level=0.95, h=20), main='Forecasting with ARIMA(1,1,1) SMI')
plot(forecast(arima, level=0.95, h=100), main='Forecasting with ARIMA(1,1,1) SMI')
plot(forecast(arima, level=0.95, h=1000), main='Forecasting with ARIMA(1,1,1) SMI')
plot(forecast(arima, level=0.20, h=1000), main='Forecasting with ARIMA(1,1,1) SMI')
plot(forecast(arima, level=0.95, h=1000), main='Forecasting with ARIMA(1,1,1) SMI')
plot(forecast(arima, level=0.99, h=1000), main='Forecasting with ARIMA(1,1,1) SMI')
plot(forecast(arima, level=0.95, h=10), main='Forecasting with ARIMA(1,1,1) SMI')
for(p in 0:max.order){
for(q in 0:max.order){
arima_aic[p+1,q+1] <- Arima(y=data$SSMI.Adjusted , order=c(p,1,q), include.constant = TRUE)$aic
}
}
arima_aic
for(p in 0:max.order){
for(q in 0:max.order){
arima_aic[p+1,q+1] <- Arima(y=log(data$SSMI.Adjusted) , order=c(p,1,q), include.constant = TRUE)$aic
}
}
arima_aic
for(p in 0:max.order){
for(q in 0:max.order){
arima_aic[p+1,q+1] <- Arima(y=log(SMI) , order=c(p,1,q), include.constant = TRUE)$aic
}
}
arima_aic
index <- which(arima_aic == min(arima_aic), arr.ind = TRUE)
ar <- as.numeric(rownames(arima_aic)[index[1]])
ma <- as.numeric(colnames(arima_aic)[index[2]])
ar
ma
arima <- Arima(y=log(SMI), order=c(ar,1,ma), include.constant = TRUE)
coeftest(arima)
plot(forecast(arima, level=0.95, h=10), main='Forecasting with ARIMA(1,1,1) SMI')
arima2 <- auto.arima(log(SMI), ic='aic')
arima2
plot(forecast(arima2, level=0.95, h=10), main='Forecasting with ARIMA(1,1,1) SMI')
plot(forecast(arima, level=0.95, h=10), main='Forecasting with ARIMA(1,1,1) SMI')
plot(forecast(arima2, level=0.9, h=10), main='Forecasting with ARIMA(1,1,1) SMI')
plot(forecast(arima, level=0.95, h=10), main='Forecasting with ARIMA(1,1,1) SMI')
plot(forecast(arima2, level=0.95, h=10), main='Forecasting with ARIMA(1,1,1) SMI')
plot(forecast(arima2, level=0.95, h=10), main='Forecasting with ARIMA(1,1,1) SMI') + grid()
plot(forecast(arima2, level=0.95, h=10), main='Forecasting with ARIMA(1,1,1) SMI'+ grid())
plot(forecast(arima2, level=0.95, h=24), main='Forecasting with ARIMA(1,1,1) SMI'+ grid())
plot(forecast(arima2, level=0.95, h=24), main='Forecasting with ARIMA(1,1,1) SMI'+ grid())
plot(forecast(arima, level=0.95, h=10), main='Forecasting with ARIMA(1,1,1) SMI' + grid())
plot(forecast(arima, level=0.95, h=10), main='Forecasting with ARIMA(1,1,1) SMI')
plot(forecast(arima, level=0.95, h=10), main='Forecasting with ARIMA(1,1,1) SMI')
plot(forecast(arima, level=0.95, h=10), main='Forecasting with ARIMA(1,1,1) SMI', + grid())
plot(forecast(arima, level=0.95, h=10), main='Forecasting with ARIMA(1,1,1) SMI' + grid())
plot(forecast(arima, level=0.95, h=10), main='Forecasting with ARIMA(1,1,1) SMI')
plot(forecast(arima2, level=0.95, h=24), main='Forecasting with ARIMA(1,1,1) SMI')
setwd('/Users/gcm/Library/Mobile Documents/com~apple~CloudDocs/HSLU/Master/2. Semester/MPM_AppliedMachineLearning/Group Work/')
data_row = read.csv('songs_normalize.csv', header=TRUE, stringsAsFactors = TRUE)
head(data_row)
data = read.csv('songs_normalize.csv', header=TRUE, stringsAsFactors = TRUE)
head(data)
plot(data$popularity ~ data$energy)
plot(data$popularity ~ data$energy + data$danceability)
boxplot(data)
boxplot(data$popularity)
boxplot(data$duration_ms)
boxplot(data$duration_ms, data$danceability )
boxplot(data$popularity, data$danceability, data$energy, data$loudness, data$speechiness, data$acousticness)
boxplot(data$danceability, data$energy, data$loudness, data$speechiness, data$acousticness)
boxplot(data$danceability, data$energy, data$speechiness, data$acousticness)
boxplot(data$danceability, data$energy, data$speechiness, data$acousticness, data$instrumentalness, data$liveness, data$valence)
View(data)
View(data)
boxplot(data$duration_ms)
boxplot(data$duration_ms, data$year)
boxplot(data$duration_ms ~ data$year)
data_20 <- data[data['year'] == 2020]
data_20
data_20 <- data[data['year'] == 2019]
data_20
data_20 <- data[data['year'] == 2018]
data_20 <- data[data['year'] == 2018,]
data_20
data_20
data_20 <- data[data['year'] == 2020,]
data_20
data_20
data_20
View(data_20)
View(data_20)
data_20 <- data[data['year'] == 2019,]
data_20 <- data[data['year'] == 2018,]
data_20 <- data[data['year'] == 2017,]
data_20 <- data[data['year'] == 2020,]
data_20 <- data[data['year'] != 2020,]
boxplot(data$duration_ms ~ data$year)
data <- data[data['year'] != 2020,]  #excluding year 2020, because it contains only 3 observations
boxplot(data$duration_ms ~ data$year)
data98 <- data[data['year'] != 1998,]
data98 <- data[data['year'] == 1998,]
data <- data[data['year'] != 2020 & data['year'] != 1998,]  #excluding year 2020, because it contains only 3 observations
boxplot(data$duration_ms ~ data$year)
plot(data$popularity ~ data$year )
boxplot(data$duration_ms ~ data$year)
boxplot(data$danceability, data$energy, data$speechiness, data$acousticness, data$instrumentalness, data$liveness, data$valence)
colnames(data)
colnames(data)
head(data)
head(data)
head(data)
head(data)
head(data)
head(data)
setwd('/Users/gcm/Library/Mobile Documents/com~apple~CloudDocs/HSLU/Master/2. Semester/MPM_AppliedMachineLearning/Group Work/')
data = read.csv('songs_normalize.csv', header=TRUE, stringsAsFactors = TRUE)
data <- data[data['year'] != 2020 & data['year'] != 1998,]  #excluding year 2020, because it contains only 3 observations. and 1998 only 1 observation.
head(data)
colnames(data)
for i in colnames(data) {
print(i)
}
for (i in colnames(data) ){
print(i)
}
for (i in colnames(data) ){
plot(data$popularity ~ i, data = data )
}
for (i in colnames(data) ){
plot(data$popularity ~ i, data = data, na.action = na.fail )
}
help(na.action)
plot(data$popularity ~ i, data = data, na.action = pass )
plot(data$popularity ~ i, data = data, na.action = 'nan' )
plot(data$popularity ~ artist, data = data)
plot(data$popularity ~ "artist", data = data)
plot(data$popularity ~ artist, data = data)
plot(data$popularity ~ song, data = data)
df2 <- data[!names(data) %in% c("artist", "song")]
colnames(df2)
for (i in colnames(df2) ){
plot(data$popularity ~ song, data = data)
}
for (i in colnames(df2) ){
plot(data$popularity ~ i, data = data)
}
for (i in colnames(df2) ){
feature <- noquote(i)
plot(data$popularity ~ i, data = data)
}
for (i in colnames(df2) ){
feature <- noquote(i)
print(feature)
# plot(data$popularity ~ i, data = data)
}
i = "explicit"
feature <- noquote(i)
print(feature)
plot(data$popularity ~ feature, data = data)
plot(data$popularity ~ explicit, data = data)
head(data)
df2 <- data[!names(data) %in% c("artist", "song", "explicit")]
for (i in colnames(df2) ){
feature <- noquote(i)
print(feature)
plot(data$popularity ~ feature, data = data)
}
for (i in colnames(df2) ){
feature <- noquote(i)
print(feature)
plot(data$popularity ~ data$feature, data = data)
}
for (i in colnames(df2) ){
feature <- noquote(i)
print(feature)
plot(data$popularity ~ data$"feature", data = data)
}
df2
colnames(df2)
plot(data$popularity ~ data$duration_ms, data = data)
boxplot(data$duration_ms ~ data$year)
boxplot(data$duration_ms ~ data$year)
